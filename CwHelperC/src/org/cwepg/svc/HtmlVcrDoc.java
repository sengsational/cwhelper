/*
 * Created on Apr 8, 2018
 *
 */
package org.cwepg.svc;

public class HtmlVcrDoc {

    public static String page;
    public static String get() {
        if (HtmlVcrDoc.page != null) return HtmlVcrDoc.page;
        else return getDefault();
    }
    
    public static String getDefault() {
        StringBuffer buf = new StringBuffer();
        buf.append("<!DOCTYPE html>\n");
        buf.append("<html lang=\"en\">\n");
        buf.append("<head>\n");
        buf.append("<title>Nani's VCR</title>\n");
        buf.append("<script>\n");
        buf.append("/* Version 18.4.5\n");
        buf.append("* To Do:\n");
        buf.append("* ????\n");
        buf.append("*/\n");
        buf.append("// Gasp! Global variables!!\n");
        buf.append("var recordPath = {}, channels = {}, tuners = {}, captures = {}, detailOn = false, title = \"\";\n");
        buf.append("\n");
        buf.append("function vID(Id) { // Shorthand for get element value by ID\n");
        buf.append("return document.getElementById(Id).value }\n");
        buf.append("\n");
        buf.append("function sID(Id, x) { // Shorthand for set element value by ID\n");
        buf.append("document.getElementById(Id).value = x }\n");
        buf.append("\n");
        buf.append("function makeLocalDT(dt) {\n");
        buf.append("var td = new Date(new Date(dt) - new Date().getTimezoneOffset()*60000);\n");
        buf.append("return td.toJSON().substr(0,16);\n");
        buf.append("}\n");
        buf.append("\n");
        buf.append("function getdatetime() {\n");
        buf.append("sID(\"startdt\", makeLocalDT(Date()));\n");
        buf.append("\n");
        buf.append("if (document.URL.substring(0,4).toLowerCase() == \"http\") { // Not running a file\n");
        buf.append("var x = document.URL.split(':')[1].substring(2)\n");
        buf.append("} else { x = \"localhost\" }; // Running a file, ignore the URL\n");
        buf.append("sID('destination', \"http://\" + x);\n");
        buf.append("// sID('destination', \"http://192.168.1.2\"); // for testing on remote Helper\n");
        buf.append("document.getElementById('destination').innerHTML = vID(\"destination\"); // Display it\n");
        buf.append("\n");
        buf.append("setChannels(); // Default channel list\n");
        buf.append("setTuners(); // Fetch tuner, capture-path lists\n");
        buf.append("}\n");
        buf.append("\n");
        buf.append("function setFilename() {\n");
        buf.append("if (vID(\"resType\") != \"Watch\") {\n");
        buf.append("if (vID(\"filename\") == \"\" || vID(\"filename\") == \"watch\" ||\n");
        buf.append("vID(\"filename\") == \"First select Time, Channel, Tuner & Capture/Watch\") { // Overwrite null or prompt but not custom name\n");
        buf.append("title = \"Manual Capture\"; var dt = makeLocalDT(vID(\"startdt\"));\n");
        buf.append("sID(\"filename\", recordPath[tuner.value] + dt.replace(\":\",\"\") +\n");
        buf.append("\"_\" + tuner.value + \"_\" + channelLookUp(tuner.value, channel.value) + fileType())\n");
        buf.append("}\n");
        buf.append("} else {sID(\"filename\", \"watch\"); title = \"Manual Watch\"}\n");
        buf.append("}\n");
        buf.append("\n");
        buf.append("function fileType() {\n");
        buf.append("if (recordPath[tuner.value] == \"\") return \".tp\"; // dummy FT for CWHelper to strip (no capture path or FT for Fusion)\n");
        buf.append("return \".ts\";\n");
        buf.append("}\n");
        buf.append("\n");
        buf.append("function captureIt() {\n");
        buf.append("setFilename();\n");
        buf.append("if (tuner.value.toUpperCase() != \"MYHD\") cID = \"channelname=\" + channelLookUp(tuner.value, channel.value)\n");
        buf.append("else cID = \"channelVirtual=\" + channel.value.split(',')[1] + \":1&protocol=8vsb\"; // Assume MyHD is 8vsb, input #1\n");
        buf.append("var dt = makeLocalDT(vID(\"startdt\"));\n");
        buf.append("setCaptures(\"capture?\" + cID + \"&datetime=\" +\n");
        buf.append("dt.substr(5,2) + \"/\" + dt.substr(8,2) + \"/\" + dt.substr(0,4) + \"%20\" + dt.substr(11,5) +\n");
        buf.append("\"&durationminutes=\" + vID(\"durationminutes\") + \"&filename=\" + encodeURI(vID(\"filename\")) +\n");
        buf.append("\"&tuner=\" + tuner.value + \"&title=\" + title)\n");
        buf.append("}\n");
        buf.append("\n");
        buf.append("function decapture(s) {\n");
        buf.append("\n");
        buf.append("// Preserve current values for optional edit\n");
        buf.append("d = new Date(captures[s].getAttribute(\"start\"));\n");
        buf.append("sID(\"startdt\", makeLocalDT(d));\n");
        buf.append("e = new Date(captures[s].getAttribute(\"end\"));\n");
        buf.append("sID(\"durationminutes\", Math.round((e-d)/60000));\n");
        buf.append("delSeqTn = captures[s].getAttribute(\"tuner\");\n");
        buf.append("delSeqCh = captures[s].getAttribute(\"channelName\") +\n");
        buf.append("',' + captures[s].getAttribute(\"channelVirtual\") + ',' + captures[s].getAttribute(\"channelDescription\");\n");
        buf.append("sID(\"filename\", captures[s].getAttribute(\"fileName\"));\n");
        buf.append("title = captures[s].getAttribute(\"title\");\n");
        buf.append("// Go delete it.\n");
        buf.append("setCaptures(\"decapture?sequence=\" + s);\n");
        buf.append("buildChannelList(delSeqCh); // Refresh channel list (to put deleted seq channel on top)\n");
        buf.append("buildTunerList(delSeqTn);\n");
        buf.append("}\n");
        buf.append("</script>\n");
        buf.append("</head>\n");
        buf.append("\n");
        buf.append("<body onload=\"getdatetime();\">\n");
        buf.append("<small>CWHelper URL: <span id=\"destination\"></span></small>\n");
        buf.append("<h2>Enter a Capture or Watch Reservation</h2>\n");
        buf.append("Start: <input type=\"datetime-local\" id=\"startdt\" onfocus=\"buildTunerList();\" onchange=\"buildTunerList();\"><br>\n");
        buf.append("Duration Minutes: <input type=\"number\" id=\"durationminutes\" value=\"60\" style=\"width:50px;\" onfocus=\"buildTunerList();\" onchange=\"buildTunerList();\"><br>\n");
        buf.append("Select Channel: <span id=\"chSelect\"></span><br />\n");
        buf.append("Select Available Tuner: <span id=\"tnSelect\"></span><br />\n");
        buf.append("Capture/Watch: <select id=\"resType\" onblur=\"setFilename();\">\n");
        buf.append("<option value=\"Manual Capture\">Capture</option><option value=\"Watch\">Watch</option></select><br />\n");
        buf.append("Filename (if capture):<br /> <input type=\"text\" id=\"filename\" onfocus=\"setFilename();\" onblur=\"setFilename();\" style=\"width:500px;\" value=\"First select Time, Channel, Tuner & Capture/Watch\"><br />\n");
        buf.append("<small>Note: Clear filename to reset to default.</small><br>\n");
        buf.append("<input type=\"button\" value=\"GO!\" onclick=\"captureIt();\">\n");
        buf.append("\n");
        buf.append("<span id=\"captureTable\"></span> <!-- This will display capture reservations & delete menu if any exist -->\n");
        buf.append("<script>\n");
        buf.append("\n");
        buf.append("function getXML(x) {\n");
        buf.append("x = x.substring(x.indexOf(\"<xml\"),x.indexOf(\"</xml\")+6); //strip HTML from XML\n");
        buf.append("x = x.replace(/&/g,'&amp;'); // XML doesn't do ampersands!\n");
        buf.append("return new DOMParser().parseFromString(x,\"text/xml\");\n");
        buf.append("}\n");
        buf.append("\n");
        buf.append("function setTuners() {\n");
        buf.append("var xhttp = new XMLHttpRequest();\n");
        buf.append("xhttp.open(\"GET\", vID(\"destination\") + \":8181/tuners\", true);\n");
        buf.append("xhttp.send();\n");
        buf.append("xhttp.onreadystatechange = function() {\n");
        buf.append("if (this.readyState == 4 && this.status == 200) {\n");
        buf.append("x = getXML(this.responseText);\n");
        buf.append("var i, y = x.getElementsByTagName(\"tuner\");\n");
        buf.append("tuners = y;\n");
        buf.append("buildTunerList();\n");
        buf.append("// for (i=0; i<y.length; i++) recordPath[y[i].getAttribute(\"name\")] = y[i].getAttribute(\"recordPath\");\n");
        buf.append("for (i=0; i<y.length; i++) {\n");
        buf.append("if (y[i].getAttribute(\"tunerType\") == \"1\") { z = \"\" } // Can't set Fusion path\n");
        buf.append("else {\n");
        buf.append("z = y[i].getAttribute(\"recordPath\").replace(/\\//g,\"\\\\\");\n");
        buf.append("if (!z.endsWith(\"\\\\\")) z += \"\\\\\";\n");
        buf.append("}\n");
        buf.append("recordPath[y[i].getAttribute(\"name\")] = z;\n");
        buf.append("}\n");
        buf.append("}\n");
        buf.append("}\n");
        buf.append("while (this.readyState != 4 && this.status == 200) {} // wait for completion\n");
        buf.append("}\n");
        buf.append("\n");
        buf.append("function buildTunerList(defTn) {\n");
        buf.append("setCaptures(\"captures\"); // Make sure that capture list is current\n");
        buf.append("rStart = Number(new Date(vID(\"startdt\")));\n");
        buf.append("rEnd = rStart + vID(\"durationminutes\")*60000;\n");
        buf.append("var t, tDef = \"\", c = captures;\n");
        buf.append("var iStart = 0, cnflTnr = \"\", text = '<select id=\"tuner\">';\n");
        buf.append("if (typeof defTn === \"string\") iStart--; // Have previous tuner, insert it at top\n");
        buf.append("for(i=iStart; i<tuners.length; i++) {\n");
        buf.append("if (i < 0) {t = defTn; tDef = t} else {t = tuners[i].getAttribute(\"name\"); if (t == tDef) continue}\n");
        buf.append("if (!(typeof channel === \"undefined\")) if (!channelLookUp(t,channel.value)) continue; // Skip undefined entities\n");
        buf.append("col = false;\n");
        buf.append("for (j=0; j<c.length; j++) {\n");
        buf.append("if (c[j].getAttribute(\"tuner\") != t) continue; // Check all caps for this tuner\n");
        buf.append("cStart = Number(new Date(c[j].getAttribute(\"start\")));\n");
        buf.append("cEnd = Number(new Date(c[j].getAttribute(\"end\")));\n");
        buf.append("if ((cStart <= rStart && rStart <= cEnd) || (cStart <= rEnd && rEnd <= cEnd)) //Collision\n");
        buf.append("if (t != tDef) {col = true; cnflTnr += t + ' '; break} // Found collision on non-default tuner no need to look further\n");
        buf.append("}\n");
        buf.append("if (!col) text += '<option value=\"' + t + '\">' + t + '</option>' // No collision, list this tuner, prev tuner first\n");
        buf.append("}\n");
        buf.append("text += '</select>';\n");
        buf.append("if (cnflTnr.length) text += '<small><br>Unavailable tuner(s): ' + cnflTnr + '</small>';\n");
        buf.append("document.getElementById(\"tnSelect\").innerHTML = text;\n");
        buf.append("}\n");
        buf.append("\n");
        buf.append("function setCaptures(m) { // use to list, add, & delete captures\n");
        buf.append("var xhttp = new XMLHttpRequest();\n");
        buf.append("xhttp.open(\"GET\", vID(\"destination\") + \":8181/\" + m, true);\n");
        buf.append("xhttp.send();\n");
        buf.append("xhttp.onreadystatechange = function() {\n");
        buf.append("if (this.readyState == 4 && this.status == 200) {\n");
        buf.append("var x = this.responseText, text = \"\", y;\n");
        buf.append("if (x.indexOf(\"<xml\") > -1) { // Got XML, success!\n");
        buf.append("x = getXML(x);\n");
        buf.append("y = x.getElementsByTagName(\"capture\");\n");
        buf.append("captures = y\n");
        buf.append("} else { // Got error response, show it above preserved table\n");
        buf.append("text += x.substring(x.indexOf(\"<br>\"),x.indexOf(\"ERROR\"))\n");
        buf.append("}\n");
        buf.append("y = captures;\n");
        buf.append("if (y.length == 0) text += '<h2>No Current Reservations</h2>'; else\n");
        buf.append("{\n");
        buf.append("var i, k, o = [];\n");
        buf.append("for (k=0; k<y.length; k++) o[k] = [Number(new Date(y[k].getAttribute(\"start\"))),y[k].getAttribute(\"sequence\")];\n");
        buf.append("o.sort(function(a, b){return a[0]-b[0]}); // List in start-time order\n");
        buf.append("text += '<h2>Current Reservation(s)</h2><form name=\"CapForm\"><table border=\"2\"><tr></tr>';\n");
        buf.append("for(k = 0; k< y.length; k++) { i = o[k][1];\n");
        buf.append("text += '<tr><td><input type=\"radio\" name=\"seq\" value=\"' + i + '\"></td>' +\n");
        buf.append("'<td>' + y[i].getAttribute(\"start\") + ' -- ' + y[i].getAttribute(\"end\") + '</td>' +\n");
        buf.append("'<td>' + y[i].getAttribute(\"channelName\") + '</td>' +\n");
        buf.append("'<td>' + y[i].getAttribute(\"alphaDescription\") + '</td>' +\n");
        buf.append("'<td>' + y[i].getAttribute(\"tuner\") + '</td>' +\n");
        buf.append("'<td>' + y[i].getAttribute(\"title\") + '</td>';\n");
        buf.append("if (detailOn) text += '<td><small>' + decodeURI(y[i].getAttribute(\"fileName\")) + '</small></td>';\n");
        buf.append("text += '</tr>'\n");
        buf.append("}\n");
        buf.append("text += '<tr></tr></table></form>To delete an item, select it and then <input type=\"button\" value=\"click here\" onclick=\"checkItem();\"><br>';\n");
        buf.append("text += '<small>Note: To edit a reservation, first delete it. After deletion, its values appear above for editing.<br>';\n");
        buf.append("if (detailOn) {text += '<input type=\"button\" value=\"Hide file names\" onclick=\"toggleDetail();\">'}\n");
        buf.append("else {text += '<input type=\"button\" value=\"Show file names\" onclick=\"toggleDetail()\">'};\n");
        buf.append("}\n");
        buf.append("document.getElementById(\"captureTable\").innerHTML = text\n");
        buf.append("}\n");
        buf.append("}\n");
        buf.append("while (this.readyState != 4 && this.status == 200) {} // wait for completion\n");
        buf.append("}\n");
        buf.append("\n");
        buf.append("function checkItem() {\n");
        buf.append("if (captures.length == 1) {decapture(0)} else // Must have >1 radio buttons, so assume deletion if only 1 capture left\n");
        buf.append("for(i = 0; i<captures.length; i++) if (CapForm.seq[i].checked) decapture(CapForm.seq[i].value);\n");
        buf.append("}\n");
        buf.append("\n");
        buf.append("function toggleDetail() {detailOn = !detailOn; setCaptures(\"captures\")}\n");
        buf.append("\n");
        buf.append("function setChannels() {\n");
        buf.append("var xhttp = new XMLHttpRequest();\n");
        buf.append("xhttp.open(\"GET\", vID(\"destination\") + \":8181/channels\", true);\n");
        buf.append("xhttp.send();\n");
        buf.append("xhttp.onreadystatechange = function() {\n");
        buf.append("if (this.readyState == 4 && this.status == 200) {\n");
        buf.append("x = getXML(this.responseText);\n");
        buf.append("channels = x.getElementsByTagName(\"channel\");\n");
        buf.append("buildChannelList();\n");
        buf.append("}\n");
        buf.append("}\n");
        buf.append("while (this.readyState != 4 && this.status == 200) {} // wait for completion\n");
        buf.append("}\n");
        buf.append("\n");
        buf.append("function buildChannelList(defCh) { // Construct single list of all unique channels\n");
        buf.append("var i, j = 0, z =[], h = channels;\n");
        buf.append("for (i = 0; i < h.length; i++) {\n");
        buf.append("chRF = h[i].getAttribute(\"channelName\");\n");
        buf.append("chVC = h[i].getAttribute(\"channelVirtual\"); newVC = true;\n");
        buf.append("for (k in z) if (chVC == z[k].VC && (chRF == z[k].RfPID || chVC == chRF)) {newVC = false; break}\n");
        buf.append("if (newVC) z[j++] = {\"VC\": chVC, \"cName\": h[i].getAttribute(\"channelDescription\"),\n");
        buf.append("\"RfPID\": h[i].getAttribute(\"channelName\")};\n");
        buf.append("}\n");
        buf.append("z.sort(compareVC);\n");
        buf.append("var cPrv = '', text = '<select id=\"channel\" onfocus=\"buildTunerList();\" onchange=\"buildTunerList();\"> ';\n");
        buf.append("// if (typeof channel === \"object\") if (channel.value != \"\") { // Have previous channel, insert it at top\n");
        buf.append("if (typeof defCh === \"string\") { // Have default channel, insert it at top\n");
        buf.append("cPrv = defCh;\n");
        buf.append("text += '<option value=\"' + cPrv + '\">' + cPrv.split(',')[2] + '</option>';\n");
        buf.append("}\n");
        buf.append("for(i=0; i<z.length; i++) {\n");
        buf.append("c = z[i].RfPID + ',' + z[i].VC + ',' + z[i].cName;\n");
        buf.append("if (c != cPrv) // Skip previous channel added to list head\n");
        buf.append("text += '<option value=\"' + c + '\">' + z[i].cName + '</option>';\n");
        buf.append("}\n");
        buf.append("text += '</select>';\n");
        buf.append("document.getElementById(\"chSelect\").innerHTML = text\n");
        buf.append("}\n");
        buf.append("function compareVC(a, b) {\n");
        buf.append("return Number(a.VC) - Number(b.VC);\n");
        buf.append("}\n");
        buf.append("function channelLookUp( tn, c) {\n");
        buf.append("// returns appropriate channel name of c for given tuner tn\n");
        buf.append("var i, y = channels, cc = c.split(',');\n");
        buf.append("for (i=0; i<y.length; i++) {\n");
        buf.append("if (cc[1] != y[i].getAttribute(\"channelVirtual\")) continue;\n");
        buf.append("if (tn != y[i].getAttribute(\"tuner\")) continue;\n");
        buf.append("if (cc[1] == y[i].getAttribute(\"channelName\")) return cc[1];\n");
        buf.append("if (cc[0] == y[i].getAttribute(\"channelName\")) return cc[0]\n");
        buf.append("} // else return null\n");
        buf.append("}\n");
        buf.append("</script>\n");
        buf.append("</body>\n");
        buf.append("</html>\n");
        return buf.toString();
    }

    public static void replacePage(String page) {
        HtmlVcrDoc.page = page;
    }
}
